from django.db import migrations, models
import django.db.models.deletion


class Migration(migrations.Migration):
    initial = True

    dependencies = []

    operations = [
        migrations.CreateModel(
            name="LogImport",
            fields=[
                ("id", models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name="ID")),
                ("kind", models.CharField(choices=[("file", "File Upload"), ("service", "Service Import")], max_length=16)),
                ("format", models.CharField(choices=[("adif", "ADIF"), ("cabrillo", "Cabrillo"), ("other", "Other")], max_length=16)),
                ("provider", models.CharField(blank=True, help_text="If kind=service, e.g., LOTW, QRZ, ClubLog", max_length=32)),
                ("original_filename", models.CharField(blank=True, max_length=255)),
                ("content_type", models.CharField(blank=True, max_length=100)),
                ("size_bytes", models.BigIntegerField(blank=True, null=True)),
                ("sha256", models.CharField(blank=True, max_length=64)),
                ("station_callsign", models.CharField(blank=True, max_length=20)),
                ("notes", models.TextField(blank=True)),
                ("meta", models.JSONField(blank=True, default=dict)),
                ("created_at", models.DateTimeField(auto_now_add=True)),
                ("imported_at", models.DateTimeField(blank=True, null=True)),
            ],
        ),
        migrations.CreateModel(
            name="LogEntry",
            fields=[
                ("id", models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name="ID")),
                ("callsign", models.CharField(db_index=True, help_text="CALL: Station worked", max_length=20)),
                ("qso_date", models.DateField(help_text="QSO_DATE: UTC date contact established")),
                ("time_on", models.TimeField(help_text="TIME_ON: UTC time contact established")),
                ("band", models.CharField(blank=True, help_text="BAND, e.g., 20m (derived from FREQ if absent)", max_length=16)),
                ("freq", models.DecimalField(blank=True, decimal_places=6, help_text="FREQ in MHz (e.g., 14.074)", max_digits=11, null=True)),
                ("band_rx", models.CharField(blank=True, help_text="BAND_RX (optional)", max_length=16)),
                ("freq_rx", models.DecimalField(blank=True, decimal_places=6, help_text="FREQ_RX in MHz", max_digits=11, null=True)),
                ("mode", models.CharField(help_text="MODE, e.g., SSB, FT8", max_length=32)),
                ("submode", models.CharField(blank=True, help_text="SUBMODE (optional)", max_length=32)),
                ("prop_mode", models.CharField(blank=True, help_text="PROP_MODE; 'SAT' requires SAT_NAME", max_length=16)),
                ("sat_name", models.CharField(blank=True, help_text="SAT_NAME if PROP_MODE is SAT", max_length=32)),
                ("station_callsign", models.CharField(blank=True, help_text="STATION_CALLSIGN (optional)", max_length=20)),
                ("operator", models.CharField(blank=True, help_text="OPERATOR (optional; treated as station callsign if STATION_CALLSIGN absent)", max_length=20)),
                ("rst_sent", models.CharField(blank=True, max_length=8)),
                ("rst_rcvd", models.CharField(blank=True, max_length=8)),
                ("qso_date_off", models.DateField(blank=True, help_text="QSO_DATE_OFF (optional)", null=True)),
                ("time_off", models.TimeField(blank=True, help_text="TIME_OFF (optional)", null=True)),
                ("srx", models.PositiveIntegerField(blank=True, help_text="SRX (optional)", null=True)),
                ("srx_string", models.CharField(blank=True, help_text="SRX_STRING (optional)", max_length=32)),
                ("stx", models.PositiveIntegerField(blank=True, help_text="STX (optional)", null=True)),
                ("stx_string", models.CharField(blank=True, help_text="STX_STRING (optional)", max_length=32)),
                ("country", models.CharField(blank=True, max_length=64)),
                ("gridsquare", models.CharField(blank=True, help_text="Grid (worked station)", max_length=16)),
                ("name", models.CharField(blank=True, help_text="NAME (operator name of station worked)", max_length=64)),
                ("tx_pwr", models.DecimalField(blank=True, decimal_places=2, help_text="TX_PWR in watts", max_digits=6, null=True)),
                ("dxcc", models.PositiveIntegerField(blank=True, help_text="DXCC entity code (worked)", null=True)),
                ("cq_zone", models.PositiveIntegerField(blank=True, help_text="CQ zone (worked)", null=True)),
                ("itu_zone", models.PositiveIntegerField(blank=True, help_text="ITU zone (worked)", null=True)),
                ("iota", models.CharField(blank=True, help_text="IOTA reference (e.g., EU-005)", max_length=10)),
                ("my_dxcc", models.PositiveIntegerField(blank=True, help_text="MY_DXCC code", null=True)),
                ("my_state", models.CharField(blank=True, help_text="MY_STATE (enumerated per ADIF)", max_length=16)),
                ("my_cnty", models.CharField(blank=True, help_text="MY_CNTY (enumerated per ADIF)", max_length=32)),
                ("my_gridsquare", models.CharField(blank=True, max_length=16)),
                ("my_vucc_grids", models.CharField(blank=True, max_length=64)),
                ("my_cq_zone", models.PositiveIntegerField(blank=True, null=True)),
                ("my_itu_zone", models.PositiveIntegerField(blank=True, null=True)),
                ("my_name", models.CharField(blank=True, help_text="MY_NAME (operator name)", max_length=64)),
                ("lotw_qsl_rcvd", models.CharField(blank=True, help_text="LOTW_QSL_RCVD (Y/N/R/I/V)", max_length=1)),
                ("lotw_qsl_rcvd_date", models.DateField(blank=True, null=True)),
                ("lotw_qsl_sent", models.CharField(blank=True, help_text="LOTW_QSL_SENT (Y/N/R/I/V)", max_length=1)),
                ("lotw_qsl_sent_date", models.DateField(blank=True, null=True)),
                ("sig", models.CharField(blank=True, help_text="SIG (e.g., POTA/SOTA)", max_length=16)),
                ("sig_info", models.CharField(blank=True, help_text="SIG_INFO (e.g., park/summit ref)", max_length=32)),
                ("my_sig", models.CharField(blank=True, help_text="MY_SIG (e.g., POTA/SOTA)", max_length=16)),
                ("my_sig_info", models.CharField(blank=True, help_text="MY_SIG_INFO (e.g., park/summit ref)", max_length=32)),
                ("sota_ref", models.CharField(blank=True, help_text="SOTA_REF (worked station)", max_length=16)),
                ("my_sota_ref", models.CharField(blank=True, help_text="MY_SOTA_REF", max_length=16)),
                ("notes", models.TextField(blank=True)),
                ("created_at", models.DateTimeField(auto_now_add=True)),
                ("updated_at", models.DateTimeField(auto_now=True)),
                ("upload", models.ForeignKey(blank=True, null=True, on_delete=django.db.models.deletion.PROTECT, related_name="entries", to="logbook.logimport")),
            ],
            options={"ordering": ["-qso_date", "-time_on", "callsign"]},
        ),
        migrations.CreateModel(
            name="LogEntryExtras",
            fields=[
                ("id", models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name="ID")),
                ("data", models.JSONField(blank=True, default=dict, help_text="Sparse ADIF fields not in core schema")),
                ("entry", models.OneToOneField(on_delete=django.db.models.deletion.CASCADE, related_name="extras", to="logbook.logentry")),
            ],
        ),
    ]

